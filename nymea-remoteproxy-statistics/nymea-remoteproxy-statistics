#!/usr/bin/env python

# -*- coding: UTF-8 -*-

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                                                                             #
#  Copyright (C) 2018 Simon Stuerz <simon.stuerz@guh.io>                      #
#                                                                             #
#  This file is part of nymea-remoteproxy.                                    #
#                                                                             #
#  nymea-remoteproxy is free software: you can redistribute it and/or modi    #
#  it under the terms of the GNU General Public License as published by       #
#  the Free Software Foundation, version 3 of the License.                    #
#                                                                             #
#  nymea-remoteproxy is distributed in the hope that it will be useful,       #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the               #
#  GNU General Public License for more details.                               #
#                                                                             #
#  You should have received a copy of the GNU General Public License          #
#  along with nymea-remoteproxy. If not, see <http://www.gnu.org/licenses/>.  #
#                                                                             #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


import sys
import os
import shutil
import traceback
import argparse
import Gnuplot
import time
import datetime

__version__ = "0.1.1"

#--------------------------------------------------------------------------------
def convertLineToTimezone(line, timezoneString):
    if timezone is "UTC":
        return line

    lineTokens = line.split(' ')
    print("Line tokens", lineTokens)
    timestamp = lineTokens[0]
    utcTime = datetime.datetime.utcfromtimestamp(int(timestamp))
    print("Convert timestamp", timestamp, utcTime.strftime("%Y.%m.%d %H:%M:%S (%Z)") , "to timezone", timezoneString)

    timezoneObject = pytz.timezone(timezoneString)
    timezoneOffset = timezoneObject.utcoffset()
    convertedTimestamp = timezoneObject.localize(utcTime)
    print("Result", timezoneOffset, utcTime.strftime("%Y-%m-%d %H:%M:%S.%f%z (%Z)"), "-->", convertedTimestamp.strftime("%Y-%m-%d %H:%M:%S.%f%z (%Z)"))


#--------------------------------------------------------------------------------
def prepareWorkingDirectory(workDirectory, logDirectory, daysCount, timezone):
    print("Prepare working directory %s" % workDirectory)

    if os.path.isdir(workDirectory):
        print("Clean up old working directory.")
        shutil.rmtree(workDirectory)

    os.makedirs(workDirectory)

    tunnelLogFiles = []
    statisticsLogFiles = []

    # Read the file list
    print("Reading files from %s" % logDirectory)
    for fileName in os.listdir(logDirectory):
        if "nymea-remoteproxy-tunnels" in fileName:
            tunnelLogFiles.append(fileName)

        if "nymea-remoteproxy-statistics" in fileName:
            statisticsLogFiles.append(fileName)

    # Sort file lists for beeing able to get the last n days logs
    tunnelLogFiles.sort()
    statisticsLogFiles.sort()

    # Write data file for processing
    tunnelLogFiles = tunnelLogFiles[-(daysCount + 1):]
    tunnelOutputFileName = workDirectory + "/tunnels.dat"
    tunnelOutputFile = open(tunnelOutputFileName, "a")

    for fileName in sorted(tunnelLogFiles):
        print("%s" % fileName)
        inputFile = open(logDirectory + "/" + fileName)
        for line in inputFile.readlines():
            tunnelOutputFile.write(line)

    tunnelOutputFile.close()

    statisticsLogFiles = statisticsLogFiles[-(daysCount + 1):]
    statisticsOutputFileName = workDirectory + "/statistics.dat"
    statisticsOutputFile = open(statisticsOutputFileName, "a")

    for fileName in sorted(statisticsLogFiles):
        print("%s" % fileName)
        inputFile = open(logDirectory + "/" + fileName)
        for line in inputFile.readlines():
            statisticsOutputFile.write(line)

    statisticsOutputFile.close()


#--------------------------------------------------------------------------------
def createStatistics(workDirectory):
    print("Preparing statistics for different plots")

    statisticsFile = open(workDirectory + "/statistics.dat", "r")
    tunnelsFile = open(workDirectory + "/tunnels.dat", "r")

    hourlyTunnelsList = []
    userList = []

    # Init lists
    for x in range(0, 24):
        hourlyTunnelsList.append(0)

    print("Initialized hour statistics %s" % hourlyTunnelsList)

    # Walk trough lines and calculate statistics
    for line in tunnelsFile.readlines():
        lineTokens = line.split(' ')
        # print("Line tokens: %s" % lineTokens)
        tunnelCloseTime = int(lineTokens[0])
        tunnelCreationTime = int(lineTokens[1])
        tunnelUser = lineTokens[2]
        tunnelTraffic = int(lineTokens[5])
        tunnelDuration = tunnelCloseTime - tunnelCreationTime;
        
        utcTime = datetime.datetime.utcfromtimestamp(int(tunnelCreationTime))
        creationTimeString = utcTime.strftime("%Y.%m.%d %H:%M:%S (%Z)")
        creationHour = int(utcTime.strftime("%H"))
        
        hourlyTunnelsList[creationHour] = hourlyTunnelsList[creationHour] + 1
        
        print("User: %s %s -> %s -> Duration: %s -> Traffic %s" % (tunnelUser, creationTimeString, creationHour, tunnelDuration, tunnelTraffic))   

    
    print("Hourly statistics %s" % hourlyTunnelsList)


#--------------------------------------------------------------------------------
def plotStatistics(workDirectory, imageWidth, imageHeight):
    print("Create statistics plots into %s" % workDirectory)

    plot = Gnuplot.Gnuplot()
    plot.title("Server connections")
    plot.xlabel("Time")
    plot.ylabel("Count")

    plot("set term png enhanced font 'Ubuntu,10' size %s, %s" % (imageWidth, imageHeight))
    plot("set output '%s'" % (workDirectory + "/statistics.png"))
    plot("set xdata time")
    plot("set timefmt '%s'")
    plot("set xtics format '%d.%m.%y %H:%M:%S'")
    plot("set yrange [0:*]")
    plot("set grid")
    plot("plot '%s' using 1:2 with lines title 'Tunnels',"
         "     '%s' using 1:3 with lines title 'Connections'" % (workDirectory + "/statistics.dat", workDirectory + "/statistics.dat"))


def sendReportMail():
    print("Sending report email")



#--------------------------------------------------------------------------------
# Main
#--------------------------------------------------------------------------------

if __name__ == "__main__":

    # Process arguments
    parser = argparse.ArgumentParser(description='The nymea-remoteproxy-statistics tool allowes to process the log files and create statistic reports.')
    parser.add_argument('-v','--version', action='version', version=__version__)
    parser.add_argument('-l', '--logs', metavar='DIR', type=str, default='/var/log', help='the path to the log directoy of the nymea-remoteproxy server. Default is "/var/log".')
    parser.add_argument('-d', '--days', metavar='DAYS', type=int, default='1', help='the amount of past days included into the report. Default is 1.')
    parser.add_argument('--width', metavar='WIDTH', type=int, default='5000', help='the width of the plot images. Default is 5000.')
    parser.add_argument('--height', metavar='HEIGHT', type=int, default='500', help='the height of the plot images. Default is 500.')
    # parser.add_argument('-t', '--timezone', metavar='ZONE', type=str, default='UTC', help='the timezone the statistics should be created for. Default is UTC.')
    args = parser.parse_args()

    # Variables
    daysCount = args.days
    imageWidth = args.width
    imageHeight = args.height
    logDirectory = os.path.abspath(args.logs)
    workDirectory = os.path.abspath("/tmp/nymea-remoteproxy-statistics")
    timezone = "UTC"

    print("-----------------------------------------------------------------------")
    print("Using log dir %s" % logDirectory)
    print("Using working dir %s" % workDirectory)
    print("Amount of days for report: %s" % daysCount)
    print("Image size: %sx%s" % (imageWidth, imageHeight))
    print("Creating statistics for timezone: %s" % timezone)
    print("-----------------------------------------------------------------------")

    # TODO: convert the logs to a certain timezone is not supported yet
    #convertLineToTimezone("1538870830 1538870830 jenkins@guh.io 37.61.202.234 37.61.202.234 13", "Europe/Vienna")

    prepareWorkingDirectory(workDirectory, logDirectory, daysCount, timezone)
    createStatistics(workDirectory)
    plotStatistics(workDirectory, imageWidth, imageHeight)


